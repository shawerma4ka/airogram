import telebot, time
from telebot import types

bot = telebot.TeleBot("5970407370:AAHWHdPZm5fGoDYrp4KFA9SmREn4N3MtVaw")
product = {}
channels = []


@bot.message_handler(commands=["start"])
def start(message):
  blacklist = open("blacklist.txt", "r")
  file_contents = blacklist.read()
  if message.chat.type == "private" and not (
    (str(message.from_user.username)) in file_contents):
    if message.chat.id == 5875900979:
      markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
                                        callback_data="create_post")
      btn2 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                        callback_data="add_channel")
      btn3 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                        callback_data="delete_channel")
      btn4 = types.InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
                                        callback_data="blacklist")
      markup.row_width = 1
      markup.add(btn1, btn2, btn3, btn4)
      bot.send_message(message.chat.id,
                       text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.chat.first_name}!"
                       "\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ —è —É–º–µ—é",
                       reply_markup=markup)
    elif not (bot.get_chat_member(chat_id=-1001501318566,
                                  user_id=message.chat.id)).status == "left":
      markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton("üÜò–ü–æ–º–æ—â—å", callback_data="help")
      btn2 = types.InlineKeyboardButton("üõü–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º",
                                        callback_data="Problem")
      markup.row_width = 1
      markup.add(btn1, btn2)
      bot.send_message(message.chat.id,
                       text="–ü–†–ò–í–ï–¢, " + message.chat.first_name + " \!"
                       "\n\n–Ø, –±–æ—Ç\-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –°–ù–ï–ì–û–ü–ê–î ‚ùÑ"
                       "\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ "
                       "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ? "
                       "\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º "
                       "–í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\. "
                       "\n\n\n\n–£ —Ç–µ–±—è —Å–ø–∞–º –∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å "
                       "–ù–ê–ú? üëâ[–ñ–ú–ò](http://t.me/AntiSPAMsnow_bot)üëà "
                       "\n\n‚ùó–ù–ê–ë–û–† –í –ö–û–ú–ê–ù–î–£ –°–ù–ï–ì–û–ü–ê–î‚ùó"
                       "\n–í–∞–∫–∞–Ω—Å–∏–∏:"
                       "\n‚Äì–û–ü–ï–†–ê–¢–û–†"
                       "\n‚Äì–ö–õ–ê–î–ú–ï–ù"
                       "\n–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É —Å –æ—Ç–º–µ—Ç–∫–æ–π ¬´–†–ê–ë–û–¢–ê¬ª "
                       "–ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º\.",
                       parse_mode="MarkdownV2",
                       reply_markup=markup)
    else:
      markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton("‚ÜóÔ∏è–ü–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                                        url="https://t.me/+9dZaK6TiamM3MDJi")
      btn2 = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="proverka")
      markup.add(btn1)
      markup.add(btn2)
      bot.send_message(message.chat.id,
                       "üì∞–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ "
                       "–Ω–∞ [–Ω–∞—Å](https://t.me/+9dZaK6TiamM3MDJi)\.",
                       parse_mode="MarkdownV2",
                       reply_markup=markup)
  else:
    bot.send_message(message.chat.id, "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")


def menu(message):
  if message.chat.id == 5875900979:
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
                                      callback_data="create_post")
    btn2 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                      callback_data="add_channel")
    btn3 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                      callback_data="delete_channel")
    btn4 = types.InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
                                      callback_data="blacklist")
    markup.row_width = 1
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ —è —É–º–µ—é",
                     reply_markup=markup)

  else:
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("üÜò–ü–æ–º–æ—â—å", callback_data="help")
    btn2 = types.InlineKeyboardButton("üõü–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º",
                                      callback_data="Problem")
    markup.row_width = 1
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id,
                     text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ —è —É–º–µ—é",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "help")
def callback_inline(call):
  markup = types.InlineKeyboardMarkup()
  btn1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="1_back")
  btn2 = types.InlineKeyboardButton("–î–∞", callback_data="tp")
  markup.add(btn1, btn2)
  bot.edit_message_text(
    chat_id=call.message.chat.id,
    message_id=call.message.message_id,
    text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã \n"
    "–û–ü–ï–†–ê–¢–û–†–ê. –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å "
    "–í–†–ï–ú–Ø. "
    "\n–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É - –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–π–¥—ë—Ç –≤–Ω–∏–∑ "
    "–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –∂–¥–∞—Ç—å –¥–æ–ª—å—à–µ."
    "\n\n–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: 13:00-03:00 –ù–°–ö. 7,14,21,28 - –≤—ã—Ö–æ–¥–Ω–æ–π.",
    reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "tp")
def callback_inline(call):
  bot.edit_message_text(chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="–°–∫–∞–∂–∏—Ç–µ —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å")
  bot.register_next_step_handler(call.message, tp)


def tp(message):
  bot.send_message(
    5875900979, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.chat.username}\n{message.text}")
  bot.send_message(
    message.chat.id,
    "–£–∂–µ –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É! –û–∂–∏–¥–∞–π—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞üòâ"
  )
  menu(message)


@bot.callback_query_handler(func=lambda call: call.data == "1_back")
def callback_inline(call):
  markup = types.InlineKeyboardMarkup()
  btn1 = types.InlineKeyboardButton("üÜò–ü–æ–º–æ—â—å", callback_data="help")
  btn2 = types.InlineKeyboardButton("üõü–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º",
                                    callback_data="Problem")
  markup.row_width = 1
  markup.add(btn1, btn2)
  bot.edit_message_text(chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="–ü–†–ò–í–ï–¢, " + call.message.chat.first_name + " \!"
                        "\n\n–Ø, –±–æ—Ç\-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –°–ù–ï–ì–û–ü–ê–î ‚ùÑ"
                        "\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ "
                        "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ? "
                        "\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –∏ –º—ã "
                        "–æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\. "
                        "\n\n\n\n–£ —Ç–µ–±—è —Å–ø–∞–º –∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å "
                        "–ù–ê–ú? üëâ[–ñ–ú–ò]("
                        "http://t.me/AntiSPAMsnow_bot)üëà "
                        "\n\n‚ùó–ù–ê–ë–û–† –í –ö–û–ú–ê–ù–î–£ –°–ù–ï–ì–û–ü–ê–î‚ùó"
                        "\n–í–∞–∫–∞–Ω—Å–∏–∏:"
                        "\n‚Äì–û–ü–ï–†–ê–¢–û–†"
                        "\n‚Äì–ö–õ–ê–î–ú–ï–ù"
                        "\n–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É —Å –æ—Ç–º–µ—Ç–∫–æ–π ¬´–†–ê–ë–û–¢–ê¬ª "
                        "–ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º\.",
                        parse_mode="MarkdownV2",
                        reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "Problem")
def callback_inline(call):
  markup = types.InlineKeyboardMarkup()
  btn1 = types.InlineKeyboardButton("üíéSenior Crystalüíé",
                                    callback_data="Product1")
  btn2 = types.InlineKeyboardButton("üç´Ice-o-lator DCIüç´",
                                    callback_data="Product2")
  btn3 = types.InlineKeyboardButton("ü•¶BOSHKI GIRLSCOUT cookiesü•¶",
                                    callback_data="Product3")
  btn4 = types.InlineKeyboardButton("‚ùÑÔ∏è‚òÜ–ú–ï–§‚òÜ [–ú–£–ö–ê]‚ùÑÔ∏è",
                                    callback_data="Product4")
  btn5 = types.InlineKeyboardButton("üí£–ì–ê–® Ice-o-lator BabyGIRLüí£",
                                    callback_data="Product5")
  markup.row_width = 1
  markup.add(btn1, btn2, btn3, btn4, btn5)
  bot.edit_message_text(
    chat_id=call.message.chat.id,
    message_id=call.message.message_id,
    text=
    "–ï—Å–ª–∏ —É —Ç–µ–±—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –ü–†–û–ë–õ–ï–ú–´ —Å –∑–∞–∫–∞–∑–æ–º, –ø—Ä–æ—á–∏—Ç–∞–π *–í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û*\!üëá"
    "\n\n–ü–†–û–ë–õ–ï–ú–´ –° –û–ü–õ–ê–¢–û–ô? –ü–ò–°–ê–¢–¨ –í TELEGRAM : \n@babushkahelpbot"
    "\n\n–ü—Ä–∏ –Ω–µ–Ω–∞—Ö–æ–¥–µ, –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞, —Ñ–æ—Ç–æ –ø–æ–∏—Å–∫–æ–≤, –Ω–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å –≤—Å–µ "
    "–≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\."
    "\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–º —Å 1 –ø–æ–∫—É–ø–∫–æ–π –≤ –ø–µ—Ä–µ–∑–∞–∫–ª–∞–¥–µ –±—É–¥–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–æ\!"
    "\n\n–ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π \(–æ—Å–∫–æ—Ä–±–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –µ–≥–æ "
    "—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤\), "
    "–≤ –ø–µ—Ä–µ–∑–∞–∫–ª–∞–¥–µ –±—É–¥–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–æ\."
    "\n\n[–ù–µ –∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞–≥–∞–∑–∏–Ω–∞ \- –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏—è\.]("
    "https://telegra.ph/%E3%85%A4%E3%85%A4%E3%85%A4-11-19-4) "
    "\n\n*–ß–¢–û–ë–´ –û–¢–ö–†–´–¢–¨ –î–ò–°–ü–£–¢:*"
    "\n\n–î–õ–Ø –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –Ω–∏–∂–µ, *–ö–ê–ö –í –ë–û–¢–ï* \-",
    reply_markup=markup,
    disable_web_page_preview=True,
    parse_mode="MarkdownV2")


@bot.callback_query_handler(func=lambda call: call.data == "Product1")
def callback_inline(call):
  product[str(call.message.chat.id)] = []
  product[str(call.message.chat.id)].append(str("–¢–æ–≤–∞—Ä: Senior Crystal"))
  bot.send_message(
    call.message.chat.id,
    "*‚ùóÔ∏è\!\!\! –í–ù–ò–ú–ê–ù–ò–ï \!\!\!‚ùóÔ∏è\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ \(id\) "
    "–∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª –±–æ—Ç –ø—Ä–æ–¥–∞–∂ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Äî –æ–Ω "
    "—Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã 1\.*",
    parse_mode="MarkdownV2")
  bot.register_next_step_handler(call.message, application)


@bot.callback_query_handler(func=lambda call: call.data == "Product2")
def callback_inline(call):
  product[str(call.message.chat.id)] = []
  product[str(call.message.chat.id)].append(str("–¢–æ–≤–∞—Ä: Ice-o-lator DCI"))
  bot.send_message(
    call.message.chat.id,
    "*‚ùóÔ∏è\!\!\! –í–ù–ò–ú–ê–ù–ò–ï \!\!\!‚ùóÔ∏è\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ \(id\) "
    "–∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª –±–æ—Ç –ø—Ä–æ–¥–∞–∂ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Äî "
    "–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã 1\.*",
    parse_mode="MarkdownV2")
  bot.register_next_step_handler(call.message, application)


@bot.callback_query_handler(func=lambda call: call.data == "Product3")
def callback_inline(call):
  product[str(call.message.chat.id)] = []
  product[str(call.message.chat.id)].append(
    str("–¢–æ–≤–∞—Ä: BOSHKI GIRLSCOUT cookies"))
  bot.send_message(
    call.message.chat.id,
    "*‚ùóÔ∏è\!\!\! –í–ù–ò–ú–ê–ù–ò–ï \!\!\!‚ùóÔ∏è\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ \(id\) "
    "–∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª –±–æ—Ç –ø—Ä–æ–¥–∞–∂ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Äî "
    "–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã 1\.*",
    parse_mode="MarkdownV2")
  bot.register_next_step_handler(call.message, application)


@bot.callback_query_handler(func=lambda call: call.data == "Product4")
def callback_inline(call):
  product[str(call.message.chat.id)] = []
  product[str(call.message.chat.id)].append(str("–¢–æ–≤–∞—Ä: –ú–ï–§ [–ú–£–ö–ê]"))
  bot.send_message(
    call.message.chat.id,
    "*‚ùóÔ∏è\!\!\! –í–ù–ò–ú–ê–ù–ò–ï \!\!\!‚ùóÔ∏è\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ \(id\) "
    "–∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª –±–æ—Ç –ø—Ä–æ–¥–∞–∂ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Äî "
    "–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã 1\.*",
    parse_mode="MarkdownV2")
  bot.register_next_step_handler(call.message, application)


@bot.callback_query_handler(func=lambda call: call.data == "Product5")
def callback_inline(call):
  product[str(call.message.chat.id)] = []
  product[str(call.message.chat.id)].append(
    str("–¢–æ–≤–∞—Ä: –ì–ê–® Ice-o-lator BabyGIRL"))
  bot.send_message(
    call.message.chat.id,
    "*‚ùóÔ∏è\!\!\! –í–ù–ò–ú–ê–ù–ò–ï \!\!\!‚ùóÔ∏è\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ \(id\) "
    "–∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª –±–æ—Ç –ø—Ä–æ–¥–∞–∂ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Äî "
    "–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã 1\.*",
    parse_mode="MarkdownV2")
  bot.register_next_step_handler(call.message, application)


def application(message):
  product[str(message.chat.id)].append(
    str(f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {message.text}"))
  bot.send_message(message.chat.id,
                   "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ —è –µ–µ –ø–µ—Ä–µ–¥–∞–º")
  bot.register_next_step_handler(message, application1)


def application1(message):
  product[str(message.chat.id)].append(str(message.text))
  case = ""
  for i in product.get(str(message.chat.id)):
    case += i + "\n"
  bot.send_message(
    5875900979, text=f"‚òë–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{message.chat.username}\n\n{case}")
  bot.send_message(
    message.chat.id,
    "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã –≤–∞–º –Ω–∞–ø–∏—à–µ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
  del product[str(message.chat.id)]
  menu(message)


@bot.callback_query_handler(func=lambda call: call.data == "create_post")
def callback_inline(call):
  if not len(channels) == 0:
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="2_back")
    markup.add(btn1)
    case = ""
    for i in channels:
      case += i.title + "\n"
    bot.edit_message_text(
      chat_id=call.message.chat.id,
      message_id=call.message.message_id,
      text=
      f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –Ω—É–∂–Ω—ã–π –ø–æ—Å—Ç. –ï–≥–æ —è —Ä–∞–∑–æ—à–ª—é –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –≥—Ä—É–ø–ø–∞–º: \n{case}",
      reply_markup=markup)
    bot.register_next_step_handler(call.message, mailing)

  else:
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                      callback_data="add_channel")
    btn2 = types.InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="2_back")
    markup.row_width = 1
    markup.add(btn1, btn2)
    bot.edit_message_text(
      chat_id=call.message.chat.id,
      message_id=call.message.message_id,
      text=
      "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é:",
      reply_markup=markup)


def mailing(message):
  for e in channels:
    bot.forward_message(e.id, message.chat.id, message.message_id)
  bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
  menu(message)


@bot.callback_query_handler(func=lambda call: call.data == "2_back")
def callback_inline(call):
  markup = types.InlineKeyboardMarkup()
  btn1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
                                    callback_data="create_post")
  btn2 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                    callback_data="add_channel")
  btn3 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                    callback_data="delete_channel")
  btn4 = types.InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="blacklist")
  markup.row_width = 1
  markup.add(btn1, btn2, btn3, btn4)
  bot.edit_message_text(chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {call.message.chat.first_name}! "
                        "\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ —è —É–º–µ—é",
                        reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "add_channel")
def callback_inline(call):
  markup = types.InlineKeyboardMarkup()
  btn1 = types.InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="2_back")
  markup.add(btn1)
  bot.edit_message_text(
    chat_id=call.message.chat.id,
    message_id=call.message.message_id,
    text=
    "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å\.\n\n*–í–∞–∂–Ω–æ:* –±–æ—Ç "
    "–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Ç–∞–∫ –∂–µ "
    "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã\(–∞–Ω–æ–Ω–∏–º–Ω–æ\)\.",
    parse_mode="MarkdownV2",
    reply_markup=markup)
  bot.register_next_step_handler(call.message, add_channel)


def add_channel(message):
  if message.forward_from_chat is None:
    bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ä–≤–∞—Ä–¥.")
    menu(message)
  elif message.forward_from_chat in channels:
    bot.send_message(message.chat.id, "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
    menu(message)
  else:
    bot.send_message(
      message.chat.id,
      f"–ö–∞–Ω–∞–ª {message.forward_from_chat.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω üéâ")
    channels.append(message.forward_from_chat)
    menu(message)


@bot.callback_query_handler(func=lambda call: call.data == "delete_channel")
def callback_inline(call):
  if not channels == ():
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="2_back")
    markup.add(btn1)
    case = ""
    for i in channels:
      case += i.title + "\n"
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{case}",
                          reply_markup=markup)
    bot.register_next_step_handler(call.message, delete)
  else:
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É",
                                      callback_data="add_channel")
    btn2 = types.InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="2_back")
    markup.row_width = 1
    markup.add(btn1, btn2)
    bot.edit_message_text(
      chat_id=call.message.chat.id,
      message_id=call.message.message_id,
      text=
      "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é:",
      reply_markup=markup)


def delete(message):
  for i in channels:
    if i.title == message.text:
      channels.pop(channels.index(i))
      bot.send_message(message.chat.id, "–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω‚òë")
  menu(message)


@bot.callback_query_handler(func=lambda call: call.data == "blacklist")
def callback_inline(call):
  markup = types.InlineKeyboardMarkup()
  btn1 = types.InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="2_back")
  markup.add(btn1)
  bot.edit_message_text(
    chat_id=call.message.chat.id,
    message_id=call.message.message_id,
    text=
    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞.",
    reply_markup=markup)
  bot.register_next_step_handler(call.message, add_blacklist)


def add_blacklist(message):
  blacklistFile = open("blacklist.txt", "w")
  blacklistFile.write(str(message.text))
  bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")


@bot.callback_query_handler(func=lambda call: call.data == "proverka")
def callback_inline(call):
  if not (bot.get_chat_member(chat_id=-1001501318566,
                              user_id=call.message.chat.id)).status == "left":
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("üÜò–ü–æ–º–æ—â—å", callback_data="help")
    btn2 = types.InlineKeyboardButton("üõü–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º",
                                      callback_data="Problem")
    markup.row_width = 1
    markup.add(btn1, btn2)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="–ü–†–ò–í–ï–¢, " + call.message.chat.first_name +
                          " \!"
                          "\n\n–Ø, –±–æ—Ç\-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ "
                          "–°–ù–ï–ì–û–ü–ê–î ‚ùÑ "
                          "\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –∏–ª–∏ "
                          "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ? "
                          "\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –∏ –º—ã "
                          "–æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\. "
                          "\n\n\n\n–£ —Ç–µ–±—è —Å–ø–∞–º –∏ –Ω–µ –º–æ–∂–µ—à—å "
                          "–Ω–∞–ø–∏—Å–∞—Ç—å –ù–ê–ú? üëâ[–ñ–ú–ò]("
                          "http://t.me/AntiSPAMsnow_bot)üëà "
                          "\n\n‚ùó–ù–ê–ë–û–† –í –ö–û–ú–ê–ù–î–£ –°–ù–ï–ì–û–ü–ê–î‚ùó"
                          "\n–í–∞–∫–∞–Ω—Å–∏–∏:"
                          "\n‚Äì–û–ü–ï–†–ê–¢–û–†"
                          "\n‚Äì–ö–õ–ê–î–ú–ï–ù"
                          "\n–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É —Å –æ—Ç–º–µ—Ç–∫–æ–π ¬´–†–ê–ë–û–¢–ê¬ª "
                          "–ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º\.",
                          parse_mode="MarkdownV2",
                          reply_markup=markup)


if __name__ == "__main__":
  while True:
    try:
      bot.polling(none_stop=True)
    except Exception as e:
      time.sleep(3)
      print(e)
